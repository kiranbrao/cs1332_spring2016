/**
 * Interface detailing the methods required for implementing a Queue.
 * DO NOT EDIT THIS FILE!
 *
 * @author CS 1332 TAs
 * @version 1.1
 */
public interface QueueInterface<T> {
    public static final int INITIAL_CAPACITY = 10;

    /**
     * Add a node with the given data to the back of your queue.
     *
     * This method should be implemented in O(1) time for the linked list-backed
     * implementation and amortized O(1) time for the array-backed
     * implementation.
     *
     * For array-backed implementations, double the size of the backing array if
     * it is full and you are trying to add another item.
     *
     * @param item the data to add.
     * @throws IllegalArgumentException if data is null
     */
    void enqueue(T item);

    /**
     * Dequeue from the front of your queue.
     *
     * This method should be implemented in O(1) time.
     *
     * For array-backed implementations:
     * - you do not need to shrink the backing array.
     * - you must put {@code null} in the dequeued element's spot.
     *
     * Do NOT reset your {@code front} and {@code back} variables to their
     * initial values if the queue happens to become empty. In other words,
     * if I enqueue, dequeue, then enqueue, then index 0 should be {@code null},
     * and index 1 should contain an item.
     *
     * @return the data from the front of the queue.
     * @throws java.util.NoSuchElementException if the queue is empty
     */
    T dequeue();

    /**
     * Return the size of the queue.
     *
     * This method should be implemented in O(1) time.
     *
     * @return number of items in the queue
     */
    int size();

    /**
     * Return true if empty, false otherwise.
     *
     * This method should be implemented in O(1) time.
     *
     * @return boolean representing whether the queue is empty
     */
    boolean isEmpty();
}
